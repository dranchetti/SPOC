{"name":"SPOC - SharePoint Online Connector.","tagline":"A Javascript library that simplifies working with the SharePoint and Yammer REST APIs from within Office 365","body":"# SPOC - SharePoint Online Connector.\r\n\r\nSPOC is a client-side Javascript library that helps you interact with the **SharePoint Online & Yammer REST APIs**. It also contains handy helper and utility functions that are regularly used when working on Front-end SharePoint projects. The library currently lets you interact with:  \r\n\r\n  - Sites\r\n  - Lists\r\n  - List Items\r\n  - User Profiles\r\n  - Yammer Search (query only)\r\n  - Yammer Messages (query only)\r\n  - Yammer Profiles (query only)\r\n\r\n##### SharePoint Hosted App Model Compatiable!\r\nSPOC has built in logic that automatcally detects when you are trying to call a site within a different domain and handles the relevent calls. This makes it really simple to interact with both the Host and App web when using the library within a SharePoint Hosted App. See the getting started examples to how this works. \r\n\r\n## Getting Started\r\nFirst download  **SPOC.min.js** from this repo and include it in your project or add it to your masterpage or page layouts. Note that **If you want to interact with Yammer from within SharePoint Online, you must also include the Yammer JS SDK** by adding the following into your masterpage or page layouts (must be loaded before SPOC.min.js).\r\n\r\n```html \r\n\r\n<!-- Load SPOC library into your masterpage or pagelayout -->\r\n<script type=\"text/javascript\" src=\"https://yoursite.sharepoint.com/document_library/SPOC.min.js\"></script>\r\n\r\n<!-- Optional - only needed if you are using Yammer functions -->\r\n<script type=\"text/javascript\" data-app-id=\"ADD YAMMER APP ID\" src=\"https://c64.assets-yammer.com/assets/platform_js_sdk.js\"></script>\r\n\r\n```\r\n\r\n> To use the Yammer API, you must first register an app on your network and set the app-id shown above. You can find out how to do this by visting the [Yammer help pages](https://developer.yammer.com/docs/app-registration)\r\n\r\n## Basic Examples\r\n\r\n##### 1. Get all items from a List\r\nThis example shows how to get list items from a list in the current site\r\n```javascript\r\n// Create a new site instance. Passing no url with set it as the current site\r\nvar site = new SPOC.SP.Site();\r\n\r\n// Pass in the name of the list that you want to query \r\nvar exampleList = site.listItems('List Name');\r\n\r\n// Query list and retrive results in a JS promise\r\nexampleList.query().then(function(results){\r\n    console.log(results);\r\n});\r\n\r\n```\r\n\r\n##### 2. Get filtered items from a List\r\nThe list item method allows you to pass in filters and query settings via a JS object. It supports all default OData query string operators (select, filter, orderBy, expand, top etc). More information can be found on [MSDN](https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection0)\r\n\r\n```javascript\r\n// Create a new site instance. Passing no url with set it as the current site\r\nvar site = new SPOC.SP.Site();\r\n\r\n// Create an object with your required settings\r\n    var settings = {\r\n        select: \"Title,Created\",\r\n        filter: \"Title eq 'My Item Title'\",\r\n        orderBy: 'Created'\r\n    };\r\n\r\n// Pass in the name of the list that you want to query \r\nvar exampleList = site.listItems('List Name');\r\n\r\n// Query list and retrive results in a JS promise\r\nexampleList.query(settings).then(function(results){\r\n    console.log(results);\r\n});\r\n\r\n```\r\n> Note that all GET requests automatically cache results in sessionStorage. If you would like to bypass the cache, pass true into the second paramater of the query function.\r\n\r\n##### 3. Create a new list item to a list in a subsite\r\nThis example shows how to create a new list item to a list in a different site to that being viewed\r\n\r\n```javascript\r\n// Create a new site instance. Pass in the url to the subsite that contains the list\r\nvar subSite = new SPOC.SP.Site('https://example.sharepoint.com/sites/mysite/mysubsite');\r\n\r\n// Create an object with a property for each column.\r\nvar item = {\r\n    Title: \"My Item title\",\r\n    description: \"text for the description column\"\r\n};\r\n\r\n// Pass in the name of the list that you want to query \r\nvar exampleList = subSite.listItems('List Name');\r\n\r\n// Query list and retrive results in a JS promise. This examples includes handling errors via a error callback\r\nexampleList.create(item).then(function(results){\r\n    console.log(results);\r\n}, function(err){\r\n    console.log(err);\r\n});\r\n\r\n```\r\n\r\n##### 4. Retrieve items from both the Host and App web from within a SharePoint Hosted App\r\nThis example shows how interacting with the host or app web when using SPOC in a SharePoint Hosted App is really simple.\r\n```javascript\r\n// Create a new site instance both the host and app web. To create the app web, leave the site param empty. To create the host web, pass your host web url into the site param.\r\nvar hostWeb = new SPOC.SP.Site('https://example.sharepoint.com/sites/mysite');\r\nvar appWeb = new SPOC.SP.Site();\r\n\r\n// Both the host and app web instances can be called as normal. The hostWeb call will automatically use the SP x domain logic.\r\nhostWeb.listItems('Host web List Name').query().then(function(data){\r\n    console.log(data)\r\n});\r\n\r\nappWeb.listItems('App Web List Name').query().then(function(data){\r\n    console.log(data)\r\n});\r\n\r\n```\r\n\r\n##### 5. Get the current users profile details\r\nThis examples shows how to get the current users profile properties\r\n\r\n```javascript\r\n// Create a new user instance.\r\nvar user = new SPOC.SP.User();\r\n\r\n// Query the users profile and retrive results in a JS promise\r\nuser.Profile().query().then(function(results){\r\n    console.log(results);\r\n});\r\n\r\n```\r\n\r\n##### 6. Get personalised yammer posts for the logged in user (Posts from People, Groups and topics that they follow)\r\nThis examples shows how to get Yammer posts from People, Groups and Topics that hte current user is following \r\n```javascript\r\n// Create a new Yammer Messages instance.\r\nvar feed = new SPOC.Yam.Feed();\r\n\r\nvar posts = feed.posts();\r\n\r\nposts.query().then(function(data){\r\n    console.log(data);\r\n    // outputs a object array of Yammer posts\r\n});\r\n\r\n// Query the users profile and retrive results in a JS promise\r\nyamUser.Messages().query().then(function(results){\r\n    console.log(results);\r\n});\r\n\r\n```\r\n\r\n##### 7. Get all posts from a Yammer Group \r\nThis examples shows how to get Yammer posts from group. This can anything that has a feed id (Group, user feed etc). For user feeds, the feed Id is the users Yammer id\r\n```javascript\r\n// Create a new Yammer feed instance. Pass in true as a second arguement if you are querying a users feed instead of a group\r\nvar feed = new SPOC.Yam.Feed('012345');\r\nvar posts = feed.posts();\r\n\r\nposts.query().then(function(data){\r\n    console.log(data);\r\n    // outputs a object array of Yammer posts\r\n});\r\n```\r\n##### 8. Search Yammer \r\nThis examples shows how to search groups, posts, documents and notes on Yammer. \r\n```javascript\r\n// Create a new Yammer Search istance.\r\nvar yamSearch = new SPOC.Yam.Search('search term');\r\n\r\nyamSearch.query().then(function(data){\r\n    console.log(data);\r\n    // outputs a object array of Yammer search results\r\n});\r\n```\r\n\r\n## Mock API calls (Developing outside of SP)\r\nTo help improve efficiency when working on front-end based SharePoint projects, we often start development offline (i.e creating the styling, HTML templates etc), and then intergrate it to SharePoint once completed. This makes the development process much quicker. \r\n\r\nThe problem with this is that you do not have access to the SharePoint API's when working offline. In order to get around this, SPOC includes the ability to create fake lists & users using javascript or a JSON file. The Library will then return the fake lists / list items / users when running outside of SharePoint! As soon as you run the file inside of SharePoint, it will return to using the real list apis. When using this feature, be sure to create a mock list for each real list within your solution.\r\n\r\n```javascript\r\n\r\n// Create items to add to the mock list \r\nvar myListItems = [{Title: \"Item One\",Title: \"Item Two\", Title: \"Item Three\"}];\r\n\r\n// Create a mock list called 'MyList' and list items\r\nSPOC.Mock.createList('MyList', myListItems);\r\n\r\n// Query SharePoint list as normal\r\n\r\nvar site = new SPOC.SP.Site();\r\nvar exampleList = site.listItems('MyList');\r\n\r\nexampleList.query().then(function(results){\r\n    console.log(results);\r\n    // Returns [{Title: \"Item One\",Title: \"Item Two\", Title: \"Item Three\"}]\r\n});\r\n\r\n```\r\n\r\n## Versions\r\n0.0.1 - Bewared - still in early development stage\r\n\r\n## License\r\n----\r\n\r\nThe code and the documentation are released under the [MIT License](license.md)\r\n\r\n**Free Software, Hell Yeah!**\r\n\r\n","google":"UA-72429814-1","note":"Don't delete this file! It's used internally to help with page regeneration."}